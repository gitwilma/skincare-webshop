// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../prisma-client"
  // engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String     @id @default(cuid())
  articleNumber String     @unique @default(cuid())
  title         String
  description   String
  image         String
  price         Float
  quantity      Int        @default(0)
  orderRows     OrderRow[]
  categories    Category[] @relation("ProductCategories")
  
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  image String

  products Product[] @relation("ProductCategories")

  adminId String
  admin   User   @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Order {
  id                String   @id @default(cuid())
  orderNumber       String   @unique @default(cuid())
  createdAt         DateTime @default(now())
  customerId        String
  totalPrice        Float
  shippingAddressId String

  orderRows       OrderRow[]
  customer        User       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  shippingAddress Address    @relation(fields: [shippingAddressId], references: [id], onDelete: Cascade)
}

model Address {
  id      String @id @default(cuid())
  name    String
  street  String
  zipcode String
  city    String
  phone   String

  orders Order[]
}

model OrderRow {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

// USER ska så småningom ersätta Customer mvh Ragnar

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String? @unique
  password String?
  isAdmin  Boolean @default(false)

  // Address Address[]
  name          String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Order         Order[]
  categories    Category[]

  @@map("user")
}

// model Address {
//   id      String @id @default(cuid())
//   name    String
//   address String
//   zipcode String
//   city    String
//   email   String
//   phone   String

//   userId Int
//   user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
